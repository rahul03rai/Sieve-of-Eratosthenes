class Solution {
public:
    int maxSubArrySum(vector<int>&a, int size)
    {
        int maxs=INT_MIN, maxe=0;
        
        for(int i=0;i<size;i++)
        {
            maxe=maxe+a[i];
            if(maxs<maxe)
                maxs=maxe;
            if(maxe<0)
                maxe=0;
        }
        return maxs;
    }
    int maximumCostSubstring(string s, string chars, vector<int>& vals) {
        map<char, int>m;
        char c='a';
        m[c]=1;
        for(int i=1;i<26;i++)
        {
            c++;
            m[c]=i+1;
        }
        int n1=chars.size();
        for(int i=0;i<n1;i++)
        {
            m[chars[i]]=vals[i];
        }
        vector<int>v;
        for(int i=0;i<s.length();i++)
        {
            v.push_back(m[s[i]]);
        }
        int ans=maxSubArrySum(v, v.size());
        if(ans<0)
            return 0;
        else
            return ans;
    }
};
