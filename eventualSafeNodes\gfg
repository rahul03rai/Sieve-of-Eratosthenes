		//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
    private:
	bool dfsCheck(int node, vector<int> adj[], int vis[], int pathVis[], int check[]) {
		vis[node] = 1;
		pathVis[node] = 1;
        check[node]=0;
        
		// traverse for adjacent nodes
		for (auto it : adj[node]) {
			// when the node is not visited
			if (!vis[it]) {
				if (dfsCheck(it, adj, vis, pathVis, check) == true){
				    check[node]=0;
				    					return true;

				}
			}
			// if the node has been previously visited
			// but it has to be visited on the same path
			else if (pathVis[it]) {
			    check[node]=0;
				return true;
			}
		}
        check[node]=1;
		pathVis[node] = 0;
		return false;
	}
  public:
    vector<int> eventualSafeNodes(int v, vector<int> adj[]) {
        // code here
        int vis[v]={0};
        int pathvis[v]={0};
        int check[v]={0};
        vector<int>safeNodes;
        for(int i=0;i<v;i++)
        {
            if(!vis[i])
            {
                if(dfsCheck(i, adj, vis, pathvis, check));
            }
        }
        for(int i=0;i<v;i++)
        {
            if(check[i]==1)
                safeNodes.push_back(i);
        }
        return safeNodes;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {

        int V, E;
        cin >> V >> E;
        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        vector<int> safeNodes = obj.eventualSafeNodes(V, adj);
        for (auto i : safeNodes) {
            cout << i << " ";
        }
        cout << endl;
    }
}

// } Driver Code Ends
