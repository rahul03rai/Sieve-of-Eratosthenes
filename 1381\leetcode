/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    TreeNode *getNewnode(int val)
    {
        TreeNode *newnode=new TreeNode;
        newnode->val=val;
        newnode->left=newnode->right=NULL;
        return newnode;

    }

    int construct_bst(vector<int> &preorder, int n, int pos, TreeNode *curr, int left, int right)
    {
        if(pos==n || preorder[pos]<left || preorder[pos]>right) //boundary case
            return pos;
        
        //Insert in left-subtree
        if(preorder[pos]<curr->val)
        {
            curr->left=getNewnode(preorder[pos]);
            pos+=1;
            pos=construct_bst(preorder, n, pos, curr->left, left, curr->val-1);

        }

        if(pos==n || preorder[pos]<left || preorder[pos]>right) //boundary case
            return pos;
        
                //Insert in right-subtree
        curr->right=getNewnode(preorder[pos]);
        pos+=1;
        pos=construct_bst(preorder, n, pos, curr->right, curr->val+1, right);
        return pos;

        
    }

public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int n=preorder.size();
        if(n==0)
            return NULL;
        TreeNode *root=getNewnode(preorder[0]);
        if(n==1)
            return root;
        construct_bst(preorder, n, 1, root, INT_MIN, INT_MAX);
        return root;

    }
};
